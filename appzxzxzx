import { shallowMount } from '@vue/test-utils';
import App from '@/path/to/app.vue'; // Adjust the path as needed

describe('App.vue', () => {
  let wrapper;
  const mockRouter = {
    push: jest.fn(),
  };

  beforeEach(() => {
    // Set up localStorage mock
    localStorage.setItem('isAuthenticated', 'false');
    wrapper = shallowMount(App, {
      mocks: {
        $router: mockRouter,
      },
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
    wrapper.destroy();
  });

  it('renders navbar if authenticated', () => {
    localStorage.setItem('isAuthenticated', 'true');
    wrapper = shallowMount(App);
    expect(wrapper.find('b-navbar').exists()).toBe(true);
  });

  it('redirects to home on mount if not authenticated', () => {
    expect(mockRouter.push).toHaveBeenCalledWith({ name: 'home' });
  });

  it('authenticates and sets username on checkLoginDone', () => {
    wrapper.vm.checkLoginDone('testUser');
    expect(wrapper.vm.isAuthenticated).toBe(true);
    expect(wrapper.vm.username).toBe('testUser');
    expect(wrapper.vm.showLogin).toBe(false);
  });

  it('deletes user if password matches', () => {
    wrapper.setData({ username: 'testUser' });
    localStorage.setItem('testUser', JSON.stringify({ password: '1234' }));
    window.prompt = jest.fn().mockReturnValue('1234');
    window.confirm = jest.fn().mockReturnValue(true);
    window.alert = jest.fn();

    wrapper.vm.deleteUser();
    expect(localStorage.getItem('testUser')).toBeNull();
    expect(window.alert).toHaveBeenCalledWith('User deleted successfully!');
    expect(wrapper.vm.isAuthenticated).toBe(false);
    expect(wrapper.vm.showLogin).toBe(true);
    expect(mockRouter.push).toHaveBeenCalledWith({ name: 'home' });
  });

  it('does not delete user if password is incorrect', () => {
    wrapper.setData({ username: 'testUser' });
    localStorage.setItem('testUser', JSON.stringify({ password: '1234' }));
    window.prompt = jest.fn().mockReturnValue('wrong');
    window.alert = jest.fn();

    wrapper.vm.deleteUser();
    expect(window.alert).toHaveBeenCalledWith('Wrong Password, Enter Correct one to delete');
  });

  it('edits password if new password meets requirements', () => {
    wrapper.setData({ username: 'testUser' });
    localStorage.setItem('testUser', JSON.stringify({ password: '1234' }));
    window.prompt = jest.fn().mockReturnValue('newPass');
    window.alert = jest.fn();

    wrapper.vm.editPassword();
    expect(localStorage.getItem('testUser')).toContain('newPass');
    expect(window.alert).toHaveBeenCalledWith('Password updated successfully! Kindly Login Again');
    expect(wrapper.vm.isAuthenticated).toBe(false);
    expect(wrapper.vm.showLogin).toBe(true);
    expect(mockRouter.push).toHaveBeenCalledWith({ name: 'home' });
  });

  it('shows error if new password does not meet requirements', () => {
    wrapper.setData({ username: 'testUser' });
    localStorage.setItem('testUser', JSON.stringify({ password: '1234' }));
    window.prompt = jest.fn().mockReturnValue(' ');
    window.alert = jest.fn();

    wrapper.vm.editPassword();
    expect(window.alert).toHaveBeenCalledWith('Enter Proper Pass');
  });

  it('logs out user', () => {
    window.confirm = jest.fn().mockReturnValue(true);
    wrapper.vm.logout();
    expect(wrapper.vm.isAuthenticated).toBe(false);
    expect(localStorage.getItem('isAuthenticated')).toBeNull();
    expect(wrapper.vm.showLogin).toBe(true);
    expect(mockRouter.push).toHaveBeenCalledWith({ name: 'home' });
  });
});


--------------------



<template>
  <div class="app">
    <b-navbar v-if="isAuthenticated" toggleable="lg" type="dark" variant="info" sticky="top">
      <b-navbar-toggle target="nav-collapse"></b-navbar-toggle>
      <b-navbar-brand style="font-size: 30px" href="#">{{ TitleNav }}</b-navbar-brand>
      <b-collapse id="nav-collapse" is-nav>
        <b-navbar-nav v-for="item in items" :key="item.id">
          <common-nav-link :is="item.componentName" :key="item.id" :input="item"></common-nav-link>
        </b-navbar-nav>

        <b-navbar toggleable="lg">
          <b-navbar-nav class="ms-auto">
            <b-nav-item-dropdown class="dot">
              <template #button-content>
                <em>{{ this.username }}</em>
              </template>

              <b-dropdown-item href="#" @click="editPassword">{{
                userLabel.change
              }}</b-dropdown-item>
              <b-dropdown-item href="#" @click="deleteUser">{{ userLabel.delete }}</b-dropdown-item>
              <b-dropdown-item href="#" @click="logout">{{ userLabel.logout }}</b-dropdown-item>
            </b-nav-item-dropdown>
          </b-navbar-nav>
        </b-navbar>
      </b-collapse>
    </b-navbar>

    <router-view v-if="isAuthenticated"></router-view>

    <div
      v-else-if="!isAuthenticated"
      class="space d-flex justify-content-center align-items-center"
    >
      <login-form
        v-if="showLogin"
        @loginDone="checkLoginDone"
        @switch-to-register="showLogin = false"
      ></login-form>
      <reg-form
        v-else
        @registration-success="showLogin = true"
        @switch-to-login="showLogin = true"
      ></reg-form>
    </div>
  </div>
</template>

<script>
import { NAVIGATIONPROPERTIES } from './common/recipe/rNavLink'
import { USER } from './common/recipe/rLogin'
import CommonNavLink from '@/components/common/CommonNavLink.vue'
import LoginForm from './components/pages/Login/LoginForm.vue'
import RegForm from './components/pages/Login/RegForm.vue'

export default {
  name: 'app',
  components: { CommonNavLink, LoginForm, RegForm },
  data() {
    return {
      userLabel: { ...USER },
      items: [...NAVIGATIONPROPERTIES],
      TitleNav: 'MadsStack',
      isAuthenticated: localStorage.getItem('isAuthenticated') === 'true',
      showLogin: true,
      username: ''
    }
  },

  /**
   * Created property to run the isAuthenticated to true even when page is refreshed
   */

  created() {
    this.startLoginPhase()
  },

  methods: {
    startLoginPhase() {
      const authenticate = JSON.parse(localStorage.getItem('isAuthenticated'))
      const login = localStorage.getItem('userLogin')
      if (authenticate && login) {
        this.isAuthenticated = true
        this.username = login
      }
      if (!this.isAuthenticated) {
        this.$router.push({ name: 'home' })
      }
    },

    /**
     * Fucntion to check the login and assign the username to the emitted username
     * @param {string} newUsername - to get the emitted username from LoginForm
     */

    checkLoginDone(newUsername) {
      this.isAuthenticated = true
      localStorage.setItem('isAuthenticated', 'true')
      this.username = newUsername

      this.showLogin = false
    },

    /**
     * Function to delete user based on username
     */

    deleteUser() {
      const user = JSON.parse(localStorage.getItem(this.username))

      if (user) {
        const pass = prompt('Enter your current password')
        if (pass === user.password) {
          const del = confirm('Are you sure to delete your Account?')
          if (del) {
            localStorage.removeItem(this.username)
            alert('User deleted successfully!')
            this.username = ''
            this.isAuthenticated = false
            this.showLogin = true
            localStorage.setItem('isAuthenticated', 'false')
            this.$router.push({ name: 'home' })
          }
        } else {
          alert('Wrong Password, Enter Correct one to delete')
        }
      }
    },

    /**
     * Function to edit password of user
     */

    editPassword() {
      const user = JSON.parse(localStorage.getItem(this.username))

      if (user) {
        const newPassword = prompt('Enter new password:')
        const maxPass = newPassword?.length >= 2 && newPassword?.length <= 8
        const spacing = newPassword?.trim() === ''
        const passPattern = /\s/

        if (maxPass && !spacing && !passPattern.test(newPassword)) {
          user.password = newPassword
          localStorage.setItem(this.username, JSON.stringify(user))

          alert('Password updated successfully! Kindly Login Again')
          localStorage.setItem('isAuthenticated', 'false')
          this.$router.push({ name: 'home' })
          this.isAuthenticated = false
          this.showLogin = true
        } else {
          alert('Enter Proper Pass')
        }
      } else {
        alert('User not found!')
      }
    },

    /**
     * Function to logout user
     */
    logout() {
      const remove = confirm('Are you sure to Logout?')
      if (remove) {
        this.isAuthenticated = false
        localStorage.removeItem('isAuthenticated')
        this.showLogin = true
        this.$router.push({ name: 'home' })
      }
    }
  }
}
</script>

<style scoped>
.dot {
  list-style: none;
}

.navbar {
  width: 100%;
}
.app {
  overflow: auto;
}

.space {
  height: 100vh;
}
</style>

