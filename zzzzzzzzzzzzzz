<template>  <canvas ref="myCanvas" width="500" height="750" style="border: 1px solid grey"></canvas></template><script>import { FetchAPI } from '@/utils/apiRequest'export default {  name: 'CanvasDisplay',  data() {    return {      //   imageUrl: null,      mockData: [        {          x: 65,          y: 515,          width: 90,          height: 50,          product_num: 1,        },      ],    }  },  mounted() {    this.fetchImage()    this.testingagain()  },  methods: {    async fetchImage() {      const fetchApi = new FetchAPI()      try {        const response = await fetchApi.get('/api/yellow-line/image/lane.png', {          responseType: 'blob',        })        const imageURL = URL.createObjectURL(response)        this.generateCanvas(imageURL)      } catch (error) {        console.error('Error fetching the image:', error)      }    },    // testingagain() {    //   const myCanvas = this.$refs.myCanvas    //   const image = this.$refs.imgUrl    //   const ctx = myCanvas.getContext('2d')    //   ctx.beginPath()    //   //   ctx.rect(20, 20, 150, 100)    //   //   ctx.fillStyle = 'red'    //   //   ctx.fillRect(20, 20, 150, 100)    //   //   ctx.stroke()    //   ctx.drawImage(image, 30, 30, 280, 280)    // },    generateCanvas(imageDB) {      const canvas = this.$refs.myCanvas      const ctx = canvas.getContext('2d')      const image = new Image()      image.src = imageDB      const styleLabel = (ctx, x, y, radius, label, fillStyle, strokeStyle) => {        ctx.beginPath()        ctx.arc(x, y, radius, 0, Math.PI * 2)        ctx.closePath()        ctx.fillStyle = fillStyle        ctx.fill()        ctx.strokeStyle = strokeStyle        ctx.lineWidth = 3        ctx.stroke()        ctx.font = 'bold 15px Arial'        ctx.textAlign = 'center'        ctx.textBaseline = 'middle'        ctx.fillStyle = 'white'        ctx.fillText(label, x, y)      }      // Load image with the process boxes      image.onload = () => {        // Draw the image on the canvas        ctx.drawImage(image, 0, 0, canvas.width, canvas.height)        // Loop through the data and draw each rectangle        this.mockData.forEach((rect) => {          // Draw the rectangle          ctx.fillStyle = this.setColor(rect.operation_status)          ctx.strokeStyle = ''          ctx.strokeStyle = 'white'          ctx.strokeRect(rect.x, rect.y, rect.width, rect.height)          ctx.fillRect(rect.x, rect.y, rect.width, rect.height)          // Draw label inside a circle          const circleX = rect.x + rect.width / 2          const circleY = rect.y + rect.height / 2          styleLabel(ctx, circleX, circleY, 15, rect.product_num, 'transparent', 'white')        })      }    },    setColor(status) {      // if(status === 1){      return 'green'      // }    },  },}</script>
