<template>
  <b-container fluid class="mx-auto my-4 w-75">
    <h1>Register Puppy</h1>
    <b-form @submit.prevent="addPuppy">
      <b-form-group label="Name:">
        <b-form-input v-model="puppy.name" placeholder="Enter name"></b-form-input>
      </b-form-group>

      <b-form-group label="breed:">
        <b-form-input v-model="puppy.breed" placeholder="Enter breed" required></b-form-input>
      </b-form-group>

      <b-form-group label="Birthdate:">
        <b-form-input
          v-model="puppy.birthdate"
          type="date"
          placeholder="Enter name"
          required
        ></b-form-input>
      </b-form-group>

      <b-form-group label="Gender:">
        <b-form-select v-model="puppy.gender" :options="options"></b-form-select>
      </b-form-group>

      <b-form-group label="Description:">
        <b-form-textarea
          id="textarea"
          v-model="puppy.description"
          placeholder="Enter puppy description..."
          rows="3"
          max-rows="6"
        ></b-form-textarea>
      </b-form-group>

      <b-button class="mt-2" type="submit">Add Puppy</b-button>
    </b-form>
  </b-container>
</template>

<script>
import PuppyList from './PuppyList.vue'
import { FetchAPI } from '@/utils/apiRequest'

export default {
  components: { PuppyList },
  name: 'PuppyForm',
  data() {
    return {
      puppy: {
        name: '',
        breed: '',
        birthdate: '',
        gender: null,
        description: ''
      },
      options: [
        { value: null, text: 'Choose Gender', disabled: true },
        { value: 1, text: 'Male' },
        { value: 2, text: 'Female' }
      ]
    }
  },
  methods: {
    async addPuppy() {
      try {
        const api = new FetchAPI()
        const response = await api.post('/api/post-puppy', this.puppy)
        console.log(response)
        if (response.success) {
          this.$emit('puppyAdded')
          alert('Puppy Added Successfully')
        } else {
          alert('Failed to Add Puppy')
        }
      } catch (err) {
        console.log(err)
      }
    }
  }
}
</script>


-------------

<template></template>

<script>
import { FetchAPI } from '@/utils/apiRequest'

export default {
  name: 'PuppyList',
  props: ['puppies'],

  data() {
    return {
      items: [{ Name: 'xcv', Birthday: 'sdfsd', Breed: 'sdfds', Gender: 'Male', Description: 'ds' }]
    }
  },

  created() {
    console.log('puppy', this.puppies)
  },

  methods: {
    async deletePuppy(id) {
      const api = new FetchAPI()
      const response = await api.delete(`/api/delete-puppy/${id}`)
      if (response.success) {
        this.$emit('puppyDeleted')
      }
    }
  }
}
</script>

-----------------


<template>
  <b-container fluid class="mx-auto my-4 w-75">
    <div>
      <h2>Manage Puppies</h2>
      <PuppyForm @puppyAdded="fetchPuppies" />
      <PuppyList :puppies="puppies" @puppyDeleted="fetchPuppies" />
    </div>

    <b-card>
      <b-table striped hover :items="puppies"></b-table>
    </b-card>
  </b-container>
</template>

<script>
import PuppyForm from './PuppyForm.vue'
import PuppyList from './PuppyList.vue'
import { FetchAPI } from '@/utils/apiRequest'

export default {
  name: 'ManagePuppies',
  components: { PuppyForm, PuppyList },
  data() {
    return {
      puppies: [],
      fields: []
    }
  },
  methods: {
    async fetchPuppies() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-puppies')
        console.log('response', response)
        if (response.success) {
          this.puppies = [...response.data]
          console.log('get puppy', this.puppies)
        } else {
          alert('Failed to fetch puppies')
        }
      } catch (err) {
        console.log(err)
        alert('An error occured while fetching puppies')
      }
    }
  },
  mounted() {
    this.fetchPuppies()
  }
}
</script>

--------------------

from flask import Blueprint, request, jsonify
import traceback


# Import db
from src.setup_db_example.models.m_puppy_model import PuppyModel
from src.setup_db_example.schemas.s_puppy_schema import PuppySchema

from src.setup_db_example.database import db

# Add routing
puppy_api_router = Blueprint("puppy_api", __name__)


# # Add routing name for api method
# @puppy_api_router.route("/api/get-sample", methods=["GET"])
# def sample_read():

#     return {
#         "message": "sample",
#     }


# Function to validate puppy data
def validate_puppy_data(data):
    required_fields = ["name", "breed", "birthdate", "gender", "description"]
    for field in required_fields:
        if field not in data or not data[field]:
            return False, f"Field '{field}' is required and cannot be null."
    # if not isinstance(data["age"], int) or data["age"] < 0:
    #     return False, "Field 'age' must be a positive integer."
    # if "ownerId" in data and data["ownerId"]:
    #     if not OwnerModel.query.get(data["ownerId"]):
    #         return False, f"Owner with ID {data['ownerId']} does not exist."
    return True, "Valid data."


@puppy_api_router.route("/api/get-puppies", methods=["GET"])
def get_puppies():
    try:
        query = PuppyModel.query.all()

        response_list = PuppySchema(many=True).dump(query)
        print(response_list)
        return {
            "success": True,
            "message_response": "PUPPY IS FETCHED SUCCESSFULLY",
            "message_content": "Puppy is fetched Successfully",
            "data": response_list,
        }, 200
    except Exception as e:
        traceback.print_exc()


@puppy_api_router.route("/api/post-puppy", methods=["POST"])
def register_puppy():
    try:
        req = request.json["params"]
        is_valid, message = validate_puppy_data(req)
        if not is_valid:
            return {"success": False, "message": message}, 400

        new_puppy = PuppyModel(
            puppy_name=req["name"],
            puppy_breed=req["breed"],
            puppy_birthdate=req["birthdate"],
            puppy_gender=req["gender"],
            puppy_description=req["description"],
        )
        db.session.add(new_puppy)
        db.session.commit()
        return {"success": True, "message": "Puppy added successfully"}, 200
    except Exception as e:
        print(traceback.format_exc())
        return {"success": False, "message": "Failed to add puppy"}, 500


@puppy_api_router.route("/api/delete-puppy/<int:puppy_id>", methods=["DELETE"])
def delete_puppy(puppy_id):
    try:
        puppy = PuppyModel.query.get_or_404(puppy_id)
        db.session.delete(puppy)
        db.session.commit()
        return jsonify({"success": True, "message": "Puppy deleted successfully"})
    except Exception as e:
        print(traceback.format_exc())
        return jsonify({"success": False, "message": "Failed to delete puppy"}), 500


# @puppy_api_router.route("/api/update-puppy/<int:puppy_id>", methods=["PUT"])
# def update_puppy(puppy_id):
#     try:
#         req = request.json["params"]
#         is_valid, message = validate_puppy_data(req)
#         if not is_valid:
#             return jsonify({"success": False, "message": message}), 400

#         puppy = PuppyModel.query.get_or_404(puppy_id)
#         puppy.name = req["name"]
#         puppy.breed = req["breed"]
#         puppy.age = req["age"]
#         puppy.adopted = req.get(
#             "adopted", puppy.adopted
#         )  # Keep existing if not provided
#         puppy.owner_id = req.get(
#             "ownerId", puppy.owner_id
#         )  # Assign or keep existing owner
#         db.session.commit()
#         return jsonify({"success": True, "message": "Puppy updated successfully"})
#     except Exception as e:
#         print(traceback.format_exc())
#         return jsonify({"success": False, "message": "Failed to update puppy"}), 500
