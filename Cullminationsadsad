from flask import Blueprint, request, jsonify
import traceback


from src.setup_db_example.models.m_shoe_model import ShoeModel
from src.setup_db_example.schemas.s_shoe_schema import ShoeSchema

from src.setup_db_example.database import db


shoe_api_router = Blueprint("shoe_api", __name__)


def validate_shoe_data(data):
    """Function to validate the data inputed by user

    Args:
        data (dict): _description_

    Returns:
        boolean: return true if data is valid or false if no data
    """
    required_fields = [
        "brand",
        "name",
        "price",
        "description",
    ]
    for field in required_fields:
        if field not in data or not data[field]:
            return False, f"Field '{field}' is required and cannot be null."

    return True, "Valid data."


@shoe_api_router.route("/api/post-shoes", methods=["POST"])
def add_shoe():
    """Function to add data to shoes table

    Returns:
        dict: return the api response
    """
    try:

        req = request.json["params"]

        is_valid, message = validate_shoe_data(req)
        if not is_valid:
            return {"success": False, "message": message}, 400

        new_shoe = ShoeModel(
            shoe_brand=req["brand"],
            shoe_name=req["name"],
            shoe_price=req["price"],
            shoe_description=req["description"],
        )

        db.session.add(new_shoe)
        db.session.commit()
        return {"success": True, "message": "Shoe added successfully"}, 200
    except Exception as e:
        print(traceback.format_exc())
        return {"success": False, "message": "Failed to add shoes"}, 500


@shoe_api_router.route("/api/get-shoes", methods=["GET"])
def get_shoes():
    """Get all the shoes

    Returns:
        dict: return the api response
    """
    try:
        query = ShoeModel.query.all()

        response_list = ShoeSchema(many=True).dump(query)
        return {
            "success": True,
            "message_response": "SHOE IS FETCHED SUCCESSFULLY",
            "message_content": "Shoe is fetched Successfully",
            "data": response_list,
        }, 200
    except Exception as e:
        traceback.print_exc()


@shoe_api_router.route("/api/delete-shoe/<int:shoe_id>", methods=["DELETE"])
def delete_shoe(shoe_id):
    """Delete specific shoe on the data on the shoe_tbl

    Args:
        shoe_id (int): reference for the shoe id

    Returns:
        dict: return the api response
    """

    try:
        shoe = ShoeModel.query.get_or_404(shoe_id)
        db.session.delete(shoe)
        db.session.commit()
        return jsonify({"success": True, "message": "Shoe deleted successfully"})
    except Exception as e:
        print(traceback.format_exc())
        return jsonify({"success": False, "message": "Failed to delete shoe"}), 500


@shoe_api_router.route("/api/update-shoes/<int:shoe_id>", methods=["PUT"])
def update_puppy(shoe_id):
    """Edit specific shoe on the data on the shoe_tbl

    Args:
        shoe_id (int): reference for the shoe id

    Returns:
        dict: return the api response
    """

    try:

        req = request.json["params"]

        # Validate input data

        # Fetch the shoe
        status = req.get("value")

        shoe = ShoeModel.query.get(shoe_id)
        shoe.shoe_status = status

        db.session.commit()
        return {"success": True, "message": "Shoe updated successfully"}, 200
    except Exception as e:
        print(traceback.format_exc())
        return {"success": False, "message": "Failed to update shoe"}, 500



--------------------------------------------


KicksPage.vue 

<template>
  <b-container fluid class="mx-auto my-4 w-75">
    <h1 class="p-3 mb-2 text-black">
      <img src="../../../assets/img/sneakers.png" />
      <p>Kicks Reviews</p>
    </h1>
    <bRow>
      <bCol>
        <div class="d-grid gap-2">
          <b-button variant="info" @click="showForm = !showForm">Post Shoes</b-button>
        </div>
      </bCol>
      <bCol>
        <div class="d-grid gap-2">
          <b-button variant="info" @click="displayShoes = !displayShoes">Display Shoes</b-button>
        </div>
      </bCol>
    </bRow>
    <main-shoes v-show="showForm"></main-shoes>

    <list-shoes @shoeAdded="fetchShoes" v-show="displayShoes"></list-shoes>
  </b-container>
</template>

<script>
import ListShoes from './ListShoes.vue'
import MainShoes from './MainShoes.vue'
import { FetchAPI } from '@/utils/apiRequest'
export default {
  components: { MainShoes, ListShoes },
  name: 'KicksPage',
  data() {
    return { showForm: false, displayShoes: false }
  },

  mounted() {
    this.fetchShoes()
  },

  methods: {
    /**
     * Function to fetch shoes
     */

    async fetchShoes() {
      const api = new FetchAPI()
      const response = await api.get('/api/get-shoes')
      if (response.success) this.shoes = [...response.data]
    }
  }
}
</script>



------------------

ListShoes.vue

<template>
  <b-container fluid class="mx-auto my-4 w-100">
    <b-card>
      <b-table
        class="table mx-auto my-4 w-100 text-break"
        striped
        hover
        :items="shoes"
        :fields="fields"
      >
        <template #cell(shoe_status)="data">
          <span>{{ data.item.shoe_status === 0 ? 'For Sale' : 'Sold' }}</span>
        </template>

        <template #cell(action)="data">
          <b-button-group>
            <b-button @click="editShoes(data.item)">Edit</b-button>
            <b-button variant="danger" @click="deleteShoes(data.item)">Delete</b-button>
          </b-button-group>
        </template>
      </b-table>
    </b-card>

    <b-modal
      v-model="editStatus"
      title="Edit Shoes"
      header-bg-variant="info"
      header-text-variant="dark"
      no-close-on-backdrop
      hide-footer
      centered
    >
      <b-row class="my-2">
        <b-col v-for="drop in items" :key="drop.id">
          <common-dropdown :input="drop" @formData="assignStatus"></common-dropdown>
        </b-col>
      </b-row>
      <b-button @click="putShoeStatus" variant="primary">Edit Puppy</b-button>
    </b-modal>
  </b-container>
</template>

<script>
import { FetchAPI } from '@/utils/apiRequest'
import CommonDropdown from '@/components/common/CommonDropdown.vue'
import { SHOESTATUS } from '@/common/recipe/rDropdownRecipe'

export default {
  name: 'ListShoes',
  components: { CommonDropdown },
  data() {
    return {
      items: SHOESTATUS,
      editShoeDetails: '',
      editStatus: false,
      shoes: [],
      fields: [
        { key: 'shoe_brand', label: 'Brand' },
        { key: 'shoe_name', label: 'Name' },
        { key: 'shoe_price', label: 'Price' },
        { key: 'shoe_description', label: 'Description' },
        { key: 'shoe_status', label: 'Status' },
        { key: 'action', label: 'action' }
      ],
      selectedShoes: null,
      shoeStatus: {}
    }
  },

  mounted() {
    this.fetchShoes()
  },

  methods: {
    /**
     * Function to toggle the modal with edit status and assign shoe id in the selectedShoes variable
     * @param {number} shoe_id - parameter to get shoe_id
     */

    editShoes(shoe_id) {
      this.editStatus = !this.editStatus
      this.selectedShoes = shoe_id
    },

    /**
     * Function to assign status to shoeStatus
     * @param {object} status - parameter to assign status value of dropdown to showStatus
     */

    assignStatus(status) {
      this.shoeStatus = status
    },

    /**
     * Function to edit shoe status and connect to backend
     */

    async putShoeStatus() {
      try {
        const api = new FetchAPI()
        const response = await api.put(
          `/api/update-shoes/${this.selectedShoes.shoe_id}`,
          this.shoeStatus
        )
        if (response.success) {
          this.fetchShoes()
          this.editShoes()
          alert('Shoes Updated Successfully')
        } else {
          alert('Failed to Update Shoes')
        }
      } catch (err) {
        console.log(err)
      }
    },

    /**
     * Function to fetch Shoes
     */

    async fetchShoes() {
      const api = new FetchAPI()
      const response = await api.get('/api/get-shoes')
      if (response.success) this.shoes = [...response.data]
    },
    /**
     * Function to delete shoe using shoe_id
     * @param {number} shoe - parameter for shoe_id
     */
    async deleteShoes(shoe) {
      const confirmed = confirm('Are you sure you want to delete?')
      if (confirmed) {
        const api = new FetchAPI()
        await api.delete(`/api/delete-shoe/${shoe.shoe_id}`)
        this.fetchShoes()
      }
    }
  }
}
</script>


---------------------------------

MainShoes.vue

<template>
  <b-container fluid class="mx-auto my-4 w-100">
    <b-card>
      <b-form @submit.prevent="formAddHandling">
        <div class="my-2" v-for="(item, id) in items" :key="id">
          <component
            :is="item.componentName"
            :key="resetShoeId"
            :input="item"
            @formData="addShoeData"
            @change="eventHandler"
            required
          >
          </component>
        </div>
      </b-form>
    </b-card>
  </b-container>
</template>

<script>
import CommonTextArea from '@/components/common/CommonTextArea.vue'
import CommonTextInput from '@/components/common/CommonTextInput.vue'
import CommonButton from '@/components/common/CommonButton.vue'
import { SHOE_INPUT } from '@/common/recipe/rTextInputRecipe'
import { SHOETEXTAREA } from '@/common/recipe/rTextArea'
import { SHOEBUTTONS } from '@/common/recipe/rButtonRecipe'
import { FetchAPI } from '@/utils/apiRequest'

export default {
  name: 'MainShoes',
  components: {
    CommonTextInput,
    CommonTextArea,
    CommonButton
  },
  data() {
    return {
      items: [...SHOE_INPUT, ...SHOETEXTAREA, ...SHOEBUTTONS],
      resetShoeId: 0,
      formShoes: {
        brand: '',
        name: '',
        price: 0,
        description: ''
      },
      errors: []
    }
  },
  methods: {
    /**
     * Function to handle the submit button and break it once formAddHandling function is used
     * @param {object} action - used assign and get the action taken of case statement
     */
    eventHandler(action) {
      switch (action) {
        case 'Submit':
          this.formAddHandling()
          break
      }
    },
    /**
     * Function to assign value to key
     * @param {object} data - used to assign and get key and value variable
     */
    addShoeData(data) {
      this.formShoes[data.key] = data.value
    },
    /**
     * Used to display data to console log and check errors and resets the array
     */
    formAddHandling() {
      if (this.checkValidity()) {
        console.log('Data Added:', this.formShoes)
        this.submitShoes()
        alert('Form Submitted!')
        this.resetShoes()
      }
    },

    /**
     * Function to add data to the shoe table in the database
     */

    async submitShoes() {
      try {
        const api = new FetchAPI()
        const response = await api.post('/api/post-shoes', this.formShoes)

        if (response.success) {
          this.$emit('shoeAdded')
          alert('Shoe Added Successfully')
        } else {
          alert('Failed to Add Shoes')
        }
      } catch (err) {
        console.log(err)
        alert('An error occurred')
      }
    },

    /**
     * Function to reset formShoes
     */
    resetShoes() {
      this.formShoes = {
        brand: '',
        name: '',
        price: '',
        description: ''
      }
      this.resetShoeId += 1
    },
    /**
     * Function to check validity of forms
     */
    checkValidity() {
      const namePattern = /^[A-Za-z\s]+$/
      const pricePattern = /^[0-9]*$/
      this.errors = []

      const validators = [
        {
          condition: () =>
            this.formShoes.brand.length > 10 ||
            this.formShoes.brand.trim() === '' ||
            !namePattern.test(this.formShoes.brand),
          message: 'Brand must not be greater than 10 characters or should not be blank',
          action: () => (this.formShoes.brand = '')
        },
        {
          condition: () =>
            this.formShoes.name.length > 10 ||
            this.formShoes.name.trim() === '' ||
            !namePattern.test(this.formShoes.name),
          message: 'Shoe Name must not be greater than 10 characters or should not be blank',
          action: () => (this.formShoes.name = '')
        },
        {
          condition: () => !pricePattern.test(this.formShoes.price),
          message: 'Invalid number, must enter at least 1 price',
          action: () => (this.formShoes.price = '')
        },
        {
          condition: () => this.formShoes.description.trim() === '',
          message: 'Please enter your description',
          action: () => (this.formShoes.description = '')
        }
      ]

      for (const validator of validators) {
        if (validator.condition()) {
          this.errors.push(validator.message)
          if (validator.action) validator.action()
        }
      }

      if (this.errors.length > 0) {
        this.errors.forEach((error) => alert(error))
        return false
      }

      return true
    }
  }
}
</script>

