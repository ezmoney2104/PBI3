<template>
  <b-container>
    <div>
      <h2>Manage Puppies</h2>
      <bRow>
        <bCol>
          <div class="d-grid gap-2">
            <b-button variant="info" @click="showPuppyForm = !showPuppyForm">Add Puppy</b-button>
          </div>
        </bCol>
        <bCol>
          <div class="d-grid gap-2">
            <b-button variant="info" @click="showOwnerForm = !showOwnerForm"
              >Register Owner</b-button
            >
          </div>
        </bCol>
      </bRow>
      <PuppyForm
        v-show="showPuppyForm"
        @puppyAdded="fetchPuppies"
        @puppyUpdated="fetchPuppies"
        :editingPuppy="selectedPuppy"
      />
      <b-table
        class="table mx-auto my-4 w-75 text-break"
        striped
        hover
        :items="puppies"
        :fields="fields"
      >
        <template #cell(puppy_gender)="data">
          <span>{{ data.item.puppy_gender === 1 ? 'Male' : 'Female' }}</span>
        </template>

        <template #cell(adopted_by)="data">
          <span>{{ data.item.owner_name || 'Not Adopted' }}</span>
        </template>

        <template #cell(action)="data">
          <b-button-group>
            <b-button @click="adoptPuppy(data.item)">Adopt</b-button>
            <b-button @click="editPuppy(data.item)">Edit</b-button>
            <b-button variant="danger" @click="deletePuppy(data.item)">Delete</b-button>
          </b-button-group>
        </template>
      </b-table>

      <owner-form v-show="showOwnerForm"></owner-form>
      <puppy-dashboard @puppyDash="fetchPuppies"></puppy-dashboard>
    </div>
  </b-container>
</template>

<script>
import PuppyForm from './PuppyForm.vue'
import OwnerForm from './OwnerForm.vue'
import { FetchAPI } from '@/utils/apiRequest'
import PuppyDashboard from './PuppyDashboard.vue'

export default {
  name: 'ManagePuppies',
  components: { PuppyForm, OwnerForm, PuppyDashboard },
  data() {
    return {
      puppies: [],
      fields: [
        { key: 'puppy_name', label: 'Name' },
        { key: 'puppy_birthdate', label: 'Birthdate' },
        { key: 'puppy_breed', label: 'Breed' },
        { key: 'puppy_gender', label: 'Gender' },
        { key: 'puppy_description', label: 'Description' },

        { key: 'action', label: 'Action' }
      ],
      showPuppyForm: false,
      showOwnerForm: false,
      selectedPuppy: null
    }
  },
  mounted() {
    this.fetchPuppies()
  },

  methods: {
    async fetchPuppies() {
      const api = new FetchAPI()
      const response = await api.get('/api/get-puppies')
      if (response.success) this.puppies = [...response.data]
    },
    async deletePuppy(puppy) {
      const confirmed = confirm('Are you sure you want to delete?')
      if (confirmed) {
        const api = new FetchAPI()
        await api.delete(`/api/delete-puppy/${puppy.puppy_id}`)
        this.fetchPuppies()
      }
    },
    editPuppy(puppy) {
      this.selectedPuppy = puppy
      this.showPuppyForm = !this.showPuppyForm
    },
    async adoptPuppy(puppy) {
      this.showOwnerForm = true
      const ownerId = prompt('Enter Owner ID for adoption:')
      if (ownerId) {
        const api = new FetchAPI()
        const response = await api.post('/api/post-adopt', {
          adopter_id: ownerId,
          puppy_tbl_id: puppy.puppy_id,
          adopt_date: new Date().toISOString().split('T')[0]
        })
        if (response.success) {
          alert('Puppy Adopted Successfully')
          this.fetchPuppies()
        } else {
          alert('Failed to Adopt Puppy')
        }
      }
    }
  }
}
</script>


-----------------


<template>
  <b-container fluid class="mx-auto my-4 w-75">
    <h1>{{ isEditing ? 'Update Puppy' : 'Register Puppy' }}</h1>
    <b-form @submit.prevent="isEditing ? updatePuppy() : addPuppy()">
      <b-form-group label="Name:">
        <b-form-input
          maxLength="20"
          minLength="1"
          v-model="puppy.name"
          placeholder="Enter name"
          required
          @keypress="validateInput"
        ></b-form-input>
      </b-form-group>

      <b-form-group label="Breed:">
        <b-form-input
          maxLength="20"
          minLength="1"
          v-model="puppy.breed"
          placeholder="Enter breed"
          required
          @keypress="validateInput"
        ></b-form-input>
      </b-form-group>

      <b-form-group label="Birthdate:">
        <b-form-input
          v-model="puppy.birthdate"
          type="date"
          placeholder="Enter birthdate"
          required
        ></b-form-input>
      </b-form-group>

      <b-form-group label="Gender:">
        <b-form-select v-model="puppy.gender" :options="options"></b-form-select>
      </b-form-group>

      <b-form-group label="Description:">
        <b-form-textarea
          id="textarea"
          v-model="puppy.description"
          placeholder="Enter puppy description..."
          rows="3"
          max-rows="6"
          maxLength="64"
          minLength="2"
          required
          @keypress="validateInput"
        ></b-form-textarea>
      </b-form-group>

      <b-button class="mt-2" type="submit">{{ isEditing ? 'Update Puppy' : 'Add Puppy' }}</b-button>
    </b-form>
  </b-container>
</template>

<script>
import { FetchAPI } from '@/utils/apiRequest'

export default {
  name: 'PuppyForm',
  props: ['editingPuppy'], // Receive puppy data for editing
  data() {
    return {
      puppy: {
        name: '',
        breed: '',
        birthdate: '',
        gender: null,
        description: ''
      },
      options: [
        { value: null, text: 'Choose Gender', disabled: true },
        { value: 1, text: 'Male' },
        { value: 2, text: 'Female' }
      ],
      isEditing: false,
      isError: false
    }
  },
  methods: {
    validateInput(event) {
      const char = String.fromCharCode(event.keyCode)
      const isLetter = /^[a-zA-Z]$/.test(char)
      if (!isLetter) {
        event.preventDefault()
      }
    },

    async addPuppy() {
      try {
        const api = new FetchAPI()
        const response = await api.post('/api/post-puppy', this.puppy)
        console.log('res', response)
        if (response.success) {
          this.$emit('puppyAdded')
          this.resetForm()
          alert('Puppy Added Successfully')
        } else {
          alert('Failed to Add Puppy')
        }
      } catch (err) {
        console.log(err)
      }
    },
    async updatePuppy() {
      try {
        const api = new FetchAPI()
        const response = await api.put(`/api/update-puppy/${this.puppy.puppy_id}`, this.puppy)
        if (response.success) {
          this.$emit('puppyUpdated')
          this.resetForm()
          alert('Puppy Updated Successfully')
        } else {
          alert('Failed to Update Puppy')
        }
      } catch (err) {
        console.log(err)
      }
    },
    resetForm() {
      const puppyForm = this.puppy
      puppyForm.name = ''
      puppyForm.breed = ''
      puppyForm.birthdate = ''
      puppyForm.gender = null
      puppyForm.description = ''
    }
  },
  watch: {
    editingPuppy: {
      immediate: true,
      handler(newValue) {
        if (newValue) {
          this.puppy = { ...newValue }
          this.isEditing = true
        } else {
          this.isEditing = false
        }
      }
    }
  }
}
</script>

