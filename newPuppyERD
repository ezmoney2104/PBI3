Database Schema
The database schema aligns with your ERD:

Puppies_tbl
puppy_id: Integer, Primary Key, Auto Increment.
name: String, Not Null.
breed: String, Not Null.
birthdate: Date, Not Null.
gender: Integer, Not Null.
description: String, Nullable.
Owners_tbl
owner_id: Integer, Primary Key, Auto Increment.
name: String, Not Null.
contact_info: Integer, Not Null.
address: String, Not Null.
Adopt_tbl
adopt_id: Integer, Primary Key, Auto Increment.
adopter_id: Integer, Foreign Key (links to Owners_tbl.owner_id).
puppy_tbl_id: Integer, Foreign Key (links to Puppies_tbl.puppy_id).
adopt_date: Date, Not Null.
Backend - Flask APIs
1. models.py
Define database models.

python
Copy code
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Puppy(db.Model):
    __tablename__ = 'puppies_tbl'
    puppy_id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    breed = db.Column(db.String(100), nullable=False)
    birthdate = db.Column(db.Date, nullable=False)
    gender = db.Column(db.Integer, nullable=False)
    description = db.Column(db.String(250))

class Owner(db.Model):
    __tablename__ = 'owners_tbl'
    owner_id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    contact_info = db.Column(db.Integer, nullable=False)
    address = db.Column(db.String(250), nullable=False)

class Adoption(db.Model):
    __tablename__ = 'adopt_tbl'
    adopt_id = db.Column(db.Integer, primary_key=True)
    adopter_id = db.Column(db.Integer, db.ForeignKey('owners_tbl.owner_id'), nullable=False)
    puppy_tbl_id = db.Column(db.Integer, db.ForeignKey('puppies_tbl.puppy_id'), nullable=False)
    adopt_date = db.Column(db.Date, nullable=False)
2. routes.py
Define API routes.

python
Copy code
from flask import Flask, request, jsonify
from models import db, Puppy, Owner, Adoption
from datetime import datetime

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///puppy_adoption.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db.init_app(app)

@app.route('/api/puppies', methods=['POST'])
def add_puppy():
    data = request.json
    try:
        new_puppy = Puppy(
            name=data['name'],
            breed=data['breed'],
            birthdate=datetime.strptime(data['birthdate'], '%Y-%m-%d'),
            gender=data['gender'],
            description=data.get('description', None)
        )
        db.session.add(new_puppy)
        db.session.commit()
        return jsonify({"success": True, "message": "Puppy added successfully"}), 201
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 400

@app.route('/api/owners', methods=['POST'])
def add_owner():
    data = request.json
    try:
        new_owner = Owner(
            name=data['name'],
            contact_info=data['contact_info'],
            address=data['address']
        )
        db.session.add(new_owner)
        db.session.commit()
        return jsonify({"success": True, "message": "Owner added successfully"}), 201
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 400

@app.route('/api/adopt', methods=['POST'])
def adopt_puppy():
    data = request.json
    try:
        new_adoption = Adoption(
            adopter_id=data['adopter_id'],
            puppy_tbl_id=data['puppy_tbl_id'],
            adopt_date=datetime.strptime(data['adopt_date'], '%Y-%m-%d')
        )
        db.session.add(new_adoption)
        db.session.commit()
        return jsonify({"success": True, "message": "Puppy adopted successfully"}), 201
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 400

@app.route('/api/puppies', methods=['GET'])
def get_puppies():
    puppies = Puppy.query.all()
    return jsonify([{
        "puppy_id": puppy.puppy_id,
        "name": puppy.name,
        "breed": puppy.breed,
        "birthdate": puppy.birthdate.strftime('%Y-%m-%d'),
        "gender": puppy.gender,
        "description": puppy.description
    } for puppy in puppies])

@app.route('/api/owners', methods=['GET'])
def get_owners():
    owners = Owner.query.all()
    return jsonify([{
        "owner_id": owner.owner_id,
        "name": owner.name,
        "contact_info": owner.contact_info,
        "address": owner.address
    } for owner in owners])
Frontend - Vue.js Application
Environment
environment.js:

javascript
Copy code
export const API_BASE_URL = "http://127.0.0.1:5000";
PuppyForm.vue
vue
Copy code
<template>
  <form @submit.prevent="addPuppy">
    <input v-model="puppy.name" placeholder="Name" required />
    <input v-model="puppy.breed" placeholder="Breed" required />
    <input v-model="puppy.birthdate" type="date" required />
    <select v-model="puppy.gender" required>
      <option value="1">Male</option>
      <option value="2">Female</option>
    </select>
    <textarea v-model="puppy.description" placeholder="Description"></textarea>
    <button type="submit">Add Puppy</button>
  </form>
</template>

<script>
import { FetchAPI } from "@/api/FetchAPI";

export default {
  data() {
    return {
      puppy: { name: "", breed: "", birthdate: "", gender: 1, description: "" },
    };
  },
  methods: {
    async addPuppy() {
      const api = new FetchAPI();
      const response = await api.post("/api/puppies", this.puppy);
      if (response.success) this.$emit("puppyAdded");
    },
  },
};
</script>
OwnerForm.vue
vue
Copy code
<template>
  <form @submit.prevent="addOwner">
    <input v-model="owner.name" placeholder="Owner Name" required />
    <input v-model="owner.contact_info" type="number" placeholder="Contact Info" required />
    <input v-model="owner.address" placeholder="Address" required />
    <button type="submit">Add Owner</button>
  </form>
</template>

<script>
import { FetchAPI } from "@/api/FetchAPI";

export default {
  data() {
    return {
      owner: { name: "", contact_info: "", address: "" },
    };
  },
  methods: {
    async addOwner() {
      const api = new FetchAPI();
      const response = await api.post("/api/owners", this.owner);
      if (response.success) this.$emit("ownerAdded");
    },
  },
};
</script>
AdoptionForm.vue
vue
Copy code
<template>
  <form @submit.prevent="adoptPuppy">
    <select v-model="adoption.adopter_id" required>
      <option v-for="owner in owners" :value="owner.owner_id" :key="owner.owner_id">
        {{ owner.name }}
      </option>
    </select>
    <select v-model="adoption.puppy_tbl_id" required>
      <option v-for="puppy in puppies" :value="puppy.puppy_id" :key="puppy.puppy_id">
        {{ puppy.name }}
      </option>
    </select>
    <input v-model="adoption.adopt_date" type="date" required />
    <button type="submit">Adopt Puppy</button>
  </form>
</template>

<script>
import { FetchAPI } from "@/api/FetchAPI";

export default {
  props: ["owners", "puppies"],
  data() {
    return {
      adoption: { adopter_id: null, puppy_tbl_id: null, adopt_date: "" },
    };
  },
  methods: {
    async adoptPuppy() {
      const api = new FetchAPI();
      const response = await api.post("/api/adopt", this.adoption);
      if (response.success) this.$emit("puppyAdopted");
    },
  },
};
</script>
Complete Integration
These components can be combined into views for managing puppies, owners, and adoptions.

Let me know if you'd like additional refinements!






You said:
give me the API from the backend. use pyhton flask. 
ChatGPT said:
ChatGPT
Here is the complete backend API built with Python Flask, covering CRUD operations for puppies, owners, and the adoption process. It follows your provided database schema and includes input validation to handle null or invalid inputs.

Backend API with Flask
1. Setup and Models
python
Copy code
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

# Flask app setup
app = Flask(__name__)
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///puppy_adoption.db"
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False

db = SQLAlchemy(app)

# Models
class Puppy(db.Model):
    __tablename__ = "puppies_tbl"
    puppy_id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    breed = db.Column(db.String(100), nullable=False)
    birthdate = db.Column(db.Date, nullable=False)
    gender = db.Column(db.Integer, nullable=False)
    description = db.Column(db.String(250))

class Owner(db.Model):
    __tablename__ = "owners_tbl"
    owner_id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    contact_info = db.Column(db.String(20), nullable=False)
    address = db.Column(db.String(250), nullable=False)

class Adoption(db.Model):
    __tablename__ = "adopt_tbl"
    adopt_id = db.Column(db.Integer, primary_key=True)
    adopter_id = db.Column(db.Integer, db.ForeignKey("owners_tbl.owner_id"), nullable=False)
    puppy_tbl_id = db.Column(db.Integer, db.ForeignKey("puppies_tbl.puppy_id"), nullable=False)
    adopt_date = db.Column(db.Date, nullable=False)

# Initialize database
with app.app_context():
    db.create_all()
2. API Endpoints
Puppy APIs
Add Puppy

python
Copy code
@app.route("/api/puppies", methods=["POST"])
def add_puppy():
    data = request.json
    if not data or not all(key in data for key in ["name", "breed", "birthdate", "gender"]):
        return jsonify({"success": False, "message": "Invalid input"}), 400
    try:
        new_puppy = Puppy(
            name=data["name"],
            breed=data["breed"],
            birthdate=datetime.strptime(data["birthdate"], "%Y-%m-%d"),
            gender=data["gender"],
            description=data.get("description", None)
        )
        db.session.add(new_puppy)
        db.session.commit()
        return jsonify({"success": True, "message": "Puppy added successfully"}), 201
    except Exception as e:
        return jsonify({"success": False, "message": str(e)}), 400
Get All Puppies

python
Copy code
@app.route("/api/puppies", methods=["GET"])
def get_puppies():
    puppies = Puppy.query.all()
    return jsonify([
        {
            "puppy_id": puppy.puppy_id,
            "name": puppy.name,
            "breed": puppy.breed,
            "birthdate": puppy.birthdate.strftime("%Y-%m-%d"),
            "gender": puppy.gender,
            "description": puppy.description,
        }
        for puppy in puppies
    ])
Delete Puppy

python
Copy code
@app.route("/api/puppies/<int:puppy_id>", methods=["DELETE"])
def delete_puppy(puppy_id):
    puppy = Puppy.query.get(puppy_id)
    if not puppy:
        return jsonify({"success": False, "message": "Puppy not found"}), 404
    try:
        db.session.delete(puppy)
        db.session.commit()
        return jsonify({"success": True, "message": "Puppy deleted successfully"}), 200
    except Exception as e:
        return jsonify({"success": False, "message": str(e)}), 400
Owner APIs
Add Owner

python
Copy code
@app.route("/api/owners", methods=["POST"])
def add_owner():
    data = request.json
    if not data or not all(key in data for key in ["name", "contact_info", "address"]):
        return jsonify({"success": False, "message": "Invalid input"}), 400
    try:
        new_owner = Owner(
            name=data["name"],
            contact_info=data["contact_info"],
            address=data["address"]
        )
        db.session.add(new_owner)
        db.session.commit()
        return jsonify({"success": True, "message": "Owner added successfully"}), 201
    except Exception as e:
        return jsonify({"success": False, "message": str(e)}), 400
Get All Owners

python
Copy code
@app.route("/api/owners", methods=["GET"])
def get_owners():
    owners = Owner.query.all()
    return jsonify([
        {
            "owner_id": owner.owner_id,
            "name": owner.name,
            "contact_info": owner.contact_info,
            "address": owner.address,
        }
        for owner in owners
    ])
Delete Owner

python
Copy code
@app.route("/api/owners/<int:owner_id>", methods=["DELETE"])
def delete_owner(owner_id):
    owner = Owner.query.get(owner_id)
    if not owner:
        return jsonify({"success": False, "message": "Owner not found"}), 404
    try:
        db.session.delete(owner)
        db.session.commit()
        return jsonify({"success": True, "message": "Owner deleted successfully"}), 200
    except Exception as e:
        return jsonify({"success": False, "message": str(e)}), 400
Adoption APIs
Adopt Puppy

python
Copy code
@app.route("/api/adopt", methods=["POST"])
def adopt_puppy():
    data = request.json
    if not data or not all(key in data for key in ["adopter_id", "puppy_tbl_id", "adopt_date"]):
        return jsonify({"success": False, "message": "Invalid input"}), 400
    try:
        adoption = Adoption(
            adopter_id=data["adopter_id"],
            puppy_tbl_id=data["puppy_tbl_id"],
            adopt_date=datetime.strptime(data["adopt_date"], "%Y-%m-%d")
        )
        db.session.add(adoption)
        db.session.commit()
        return jsonify({"success": True, "message": "Puppy adopted successfully"}), 201
    except Exception as e:
        return jsonify({"success": False, "message": str(e)}), 400
Get Adoption Records

python
Copy code
@app.route("/api/adoptions", methods=["GET"])
def get_adoptions():
    adoptions = Adoption.query.all()
    return jsonify([
        {
            "adopt_id": adoption.adopt_id,
            "adopter_id": adoption.adopter_id,
            "puppy_tbl_id": adoption.puppy_tbl_id,
            "adopt_date": adoption.adopt_date.strftime("%Y-%m-%d"),
        }
        for adoption in adoptions
    ])
Running the Application
Install dependencies:

bash
Copy code
pip install flask flask-sqlalchemy
Run the application:

bash
Copy code
python <filename>.py
Test the APIs using tools like Postman or integrate them with your Vue.js frontend.

Let me know if you need further adjustments or frontend integration!






You said:
give me the function to compute the age of the puppy based on the birthdate
ChatGPT said:
ChatGPT
You can compute the age of the puppy based on the birthdate by comparing it to the current date. Here's a helper function in Python to calculate the age in years:

python
Copy code
from datetime import datetime

def calculate_puppy_age(birthdate):
    """
    Calculate the age of the puppy in years based on its birthdate.
    
    Args:
        birthdate (datetime.date): The puppy's birthdate.
        
    Returns:
        int: The age of the puppy in years.
    """
    today = datetime.today().date()
    age = today.year - birthdate.year - ((today.month, today.day) < (birthdate.month, birthdate.day))
    return age
Usage Example:
python
Copy code
birthdate = datetime.strptime("2020-05-15", "%Y-%m-%d").date()  # Example birthdate
puppy_age = calculate_puppy_age(birthdate)
print(f"The puppy is {puppy_age} years old.")
Explanation:
Subtract Birth Year from Current Year:
today.year - birthdate.year calculates the difference in years.
Adjust for Birth Month/Day:
If the current month/day is earlier than the puppy's birth month/day, subtract 1 to ensure the age is accurate.
Integration in Flask API:
If you want to add this functionality to an endpoint, you can use it as follows:

python
Copy code
@app.route("/api/puppy-age/<int:puppy_id>", methods=["GET"])
def get_puppy_age(puppy_id):
    puppy = Puppy.query.get(puppy_id)
    if not puppy:
        return jsonify({"success": False, "message": "Puppy not found"}), 404
    puppy_age = calculate_puppy_age(puppy.birthdate)
    return jsonify({"success": True, "puppy_id": puppy_id, "age": puppy_age})
This endpoint calculates and returns the puppy's age for a given puppy_id.
